<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--  
	//게시물 개수
	public int getCount(String field, String query) throws ClassNotFoundException, SQLException;
	//전체 게시물
	public List<Notice> getNotices(int page, String field, String query) throws ClassNotFoundException, SQLException;
	//게시물 삭제
	public int delete(String seq) throws ClassNotFoundException, SQLException;
	//게시물 수정
	public int update(Notice notice) throws ClassNotFoundException, SQLException;
	//게시물 상세
	public Notice getNotice(String seq) throws ClassNotFoundException, SQLException;
	//게시물 입력
	public int insert(Notice n) throws ClassNotFoundException, SQLException; 
-->
<mapper namespace="dao.NoticeDao">
	<!--  
		parameter 1개 생략 가능
		parameter 2개 이상 -> DTO 없는 경우 : hashMap
		parameter 2개 이상 -> DTO 있는 경우 : vo.Notice
		
		KEY POINT
		parameter 1개 생략 : 만약 받게될 경우 #{value} -> 이건 param1 으로 사용할 수 없다
		parameter 2개 이상(map 사용 안할 경우) : getCount(String field, String query)
		1. 순서대로  
		> String field > param1 , 
		> String query > param2
	-->
	<select id="getCount" resultType="Integer"  >
		SELECT COUNT(*) CNT 
		FROM NOTICES 
		WHERE ${param1} LIKE '%${param2}%'
	</select>
	<!--  
		public List<Notice> getNotices(int page, String field, String query)
		
		parameter 가 아래와 같이 logic을 가지고 있을 경우
		int srow = 1 + (page-1)*5; -> 오라클에서 가능한 연산자를 쓰면 아래처럼 그대로 로직을 가져와서 사용할 수 있다
		int erow = 5 + (page-1)*5;  
		
		paramter가 3개 있을 경우 : int page, String field, String query
		param1 , param2 , param3
		
		이바티스에서는 collection에 대해 딱히 고려할 필요가 없다 (자동 생성해줌)
		1건 이상 : return List<Notice>
		2건 : return Notice 
		숫자면 # 이든 $ 이든 상관없다
	-->
	<select id="getNotices" resultType="vo.Notice">
		SELECT * FROM
				 (SELECT ROWNUM NUM, N.* 
				  FROM (SELECT * FROM NOTICES WHERE ${param2} LIKE '%${param3}%' ORDER BY REGDATE DESC) N)
		WHERE NUM BETWEEN 1 + (${param1}-1)*5 AND 5 + (${param1}-1)*5
	</select>
	<!--  
		public Notice getNotice(String seq)
		parameter 1개는 생략 가능하지만 param1 이렇게 표기는 불가능하다
	-->
	<select id="getNotice" resultType="vo.Notice">
		SELECT seq,title,writer,content,regdate,hit,filesrc,filesrc2 
		FROM NOTICES 
		WHERE SEQ=#{seq}
	</select>
	<!--  
		public int delete(String seq)
		delete, update, insert는 resultType 적지 않는다
	-->
	 <delete id="delete">
	 	DELETE NOTICES WHERE SEQ=#{seq}
	 </delete>
	<!--  
		public int update(Notice notice)
		숫자가 아닌 경우는 '' 이 필요하므로 #으로 사용 
		원칙은 id="update" parameterType="vo.Notice" 이지만
		vo,dto 타입은 Parameter 사용시에 생략 가능하다 : 너무 생략하면 가독성이 떨어진다는 점 유의
		
		FILESRC=#{filesrc}
		FILESRC2=#{filesrc2}
		
		파일 수정시 null, null 또는 1개만 수정(null, 1.jpg) 또는 2개 수정 (1.jpg, 2.jpg) 이런 다수의 경우가 존재한다
		#{filesrc} 에 대해 기본 타입을 정의할 수 있다 ->#{filesrc,jdbcType=VARCHAR} 값이 없을 경우 알아서 빈문자열이 들어간다 (기본타입으로 update) 
	-->
	 <update id="update">
	 	UPDATE NOTICES 
	 	SET TITLE=#{title}, 
	 	    CONTENT=#{content}, 
	 	    FILESRC=#{fileSrc,jdbcType=VARCHAR}, 
	 	    FILESRC2=#{fileSrc2,jdbcType=VARCHAR} 
	 	WHERE SEQ=#{seq}
	 </update>
	<!--  
		public int insert(Notice n)
		Parameter 생략 가능 -> Notice n
		
		INSERT INTO NOTICES(SEQ, TITLE, CONTENT, WRITER, REGDATE, HIT, FILESRC , FILESRC2) 
		VALUES( (SELECT MAX(TO_NUMBER(SEQ))+1 FROM NOTICES), ?, ?, 'newleckosta', SYSDATE, 0, ?,?)
		
		selectKey 사용
		
		아래에서 notice n 생략했는데도 controller에서 n이라고 쓰면 받아준다 
	-->
	  <insert id="insert">
	  	<selectKey order="BEFORE" keyProperty="seq" resultType="String">
	  		SELECT MAX(TO_NUMBER(SEQ))+1 FROM NOTICES
	  	</selectKey>
	  	     INSERT INTO NOTICES(SEQ, TITLE, CONTENT, WRITER, REGDATE, HIT, FILESRC , FILESRC2) 
	         VALUES(#{seq},#{title}, #{content},'bituser',SYSDATE, 0,#{fileSrc,jdbcType=VARCHAR},#{fileSrc2,jdbcType=VARCHAR})
	  </insert>
</mapper>